-> Create Resource Group, Virtual Network & Subnets for each tier (Web, App, and DB)
-> Create Network Security Groups and their rules for each tier
->  Define VMs and configurations
-> Attach VMs to Network Interfaces
-> Create Azure Application Gateway & Define Gateway IP Configuration along with WAF
-> Define Frontend Port and IP Configuration , Backend Address Pool ,HTTP Listeners
-> Define Request Routing Rules
-> Define Backend HTTP Settings
-> Create Public IP for the Application Gateway
-> Configure DNS and Application Deployments

-------------------------------------------------------------------------------------------
provider "azurerm" {
  features {}
}

# Create a resource group
resource "azurerm_resource_group" "pranavirg" {
  name     = "PranaviResourceGroup"
  location = "East US"
}

# Create a virtual network
resource "azurerm_virtual_network" "pranavivnet" {
  name                = "pranaviVNet"
  resource_group_name = azurerm_resource_group.pranavirg.name
  location            = azurerm_resource_group.pranavirg.location
  address_space       = ["10.0.0.0/16"]
}

# Create subnets for each tier
resource "azurerm_subnet" "web" {
  name                 = "web-subnet"
  resource_group_name  = azurerm_resource_group.pranavirg.name
  virtual_network_name = azurerm_virtual_network.pranavivnet.name
  address_prefixes     = ["10.0.1.0/24"]
}

resource "azurerm_subnet" "app" {
  name                 = "app-subnet"
  resource_group_name  = azurerm_resource_group.pranavirg.name
  virtual_network_name = azurerm_virtual_network.pranavivnet.name
  address_prefixes     = ["10.0.2.0/24"]
}

resource "azurerm_subnet" "db" {
  name                 = "db-subnet"
  resource_group_name  = azurerm_resource_group.pranavirg.name
  virtual_network_name = azurerm_virtual_network.pranavivnet.name
  address_prefixes     = ["10.0.3.0/24"]
}

# Create network security groups for each tier

resource "azurerm_network_security_group" "web" {
  name                = "web-nsg"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name
}

resource "azurerm_network_security_group" "app" {
  name                = "app-nsg"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name
}

resource "azurerm_network_security_group" "db" {
  name                = "db-nsg"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name
}

# Define security rules for network security groups
# For example, allow incoming HTTP traffic
resource "azurerm_network_security_rule" "web_http" {
  name                        = "allow-http"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "80"
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  network_security_group_name = azurerm_network_security_group.web.name
}

# For app tier, you might need different rules
# For the app tier, allow incoming application-specific traffic
resource "azurerm_network_security_rule" "app_http" {
  name                        = "allow-app-http"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "8080"  # Example port 
  source_address_prefix       = "*"
  destination_address_prefix  = "*"
  network_security_group_name = azurerm_network_security_group.app.name
}

# For the database tier, you would typically allow traffic from the app tier
resource "azurerm_network_security_rule" "db_app" {
  name                        = "allow-app-to-db"
  priority                    = 100
  direction                   = "Inbound"
  access                      = "Allow"
  protocol                    = "Tcp"
  source_port_range           = "*"
  destination_port_range      = "1433" # SQL Server port
  source_address_prefix       = azurerm_subnet.app.address_prefixes[0]
  destination_address_prefix  = "*"
  network_security_group_name = azurerm_network_security_group.db.name
}

# Create network interfaces for each tier & assosciating them with NSGs

resource "azurerm_network_interface" "web" {
  count               = 2
  name                = "web-nic-${count.index}"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.web.id
    private_ip_address_allocation = "Dynamic"
  }
  network_security_group_ids = [azurerm_network_security_group.web.id]
}

resource "azurerm_network_interface" "app" {
  count               = 2
  name                = "app-nic-${count.index}"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.app.id
    private_ip_address_allocation = "Dynamic"
  }
  network_security_group_ids = [azurerm_network_security_group.app.id]
}

resource "azurerm_network_interface" "db" {
  count               = 2
  name                = "db-nic-${count.index}"
  location            = azurerm_resource_group.pranavirg.location
  resource_group_name = azurerm_resource_group.pranavirg.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.db.id
    private_ip_address_allocation = "Dynamic"
  }
  network_security_group_ids = [azurerm_network_security_group.db.id]
}

# Define VMs and their configuration
resource "azurerm_windows_virtual_machine" "pranaviwebvms" {
  count                 = 2
  name                  = "web-vm-${count.index}"
  location              = azurerm_resource_group.pranavirg.location
  resource_group_name   = azurerm_resource_group.pranavirg.name
  network_interface_ids = [azurerm_network_interface.web.id]
  size                  = "Standard_DS2_v2"
  admin_username        = "admin1"
  admin_password        = "Password123!"

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Premium_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter"
    version   = "latest"
  }
}
#similarly we can create for app and db tiers

# Define Azure Application Gateway with WAF
resource "azurerm_application_gateway" "pranaviAGW" {
  name                = "pranavi-appgateway"
  resource_group_name = azurerm_resource_group.pranavirg.name
  location            = azurerm_resource_group.pranavirg.location
  sku {
    name     = "WAF_v2"
    tier     = "WAF_v2"
    capacity = 2
  }

  gateway_ip_configuration {
    name      = "appGatewayIpConfig"
    subnet_id = azurerm_subnet.web.id
  }

  frontend_port {
    name = "http"
    port = 80
  }

  frontend_ip_configuration {
    name                 = "publicIPAddress"
    public_ip_address_id = azurerm_public_ip.example.id
  }

  backend_address_pool {
    name = "backendPool"
  }

  # Define a listener
  listener {
    name                           = "http"
    frontend_ip_configuration_name = "publicIPAddress"
    frontend_port_name             = "http"
    protocol                       = "Http"
  }

  # Define request routing rules to route traffic to backend pools
  request_routing_rule {
    name                       = "rule1"
    rule_type                  = "Basic"
    http_listener_name          = azurerm_application_gateway.pranaviAGW.listener[0].name
    backend_address_pool_name   = azurerm_application_gateway.pranaviAGW.backend_address_pool[0].name
    backend_http_settings_name  = azurerm_application_gateway.pranaviAGW.backend_http_settings[0].name
  }

  backend_http_settings {
    name                  = "exampleBackendHttpSettings"
    cookie_based_affinity = "Disabled"
    path                  = "/"
    port                  = 80
    protocol              = "Http"
    request_timeout       = 60
  }

  http_listener {
    name                           = "httpListener"
    frontend_ip_configuration_name = "publicIPAddress"
    frontend_port_name             = "http"
    protocol                       = "Http"
  }

  http_listener {
    name                           = "httpsListener"
    frontend_ip_configuration_name = "publicIPAddress"
    frontend_port_name             = "https"
    protocol                       = "Https"
    ssl_certificate_name            = azurerm_application_gateway.pranaviAGW.ssl_certificate[0].name
  }

  ssl_certificate {
    name     = "exampleSSLCert"
    data     = filebase64("./example.pfx")
    password = "examplePasswordHere"
  }

  # Define backend pools and associate VMs with it
  backend_address_pool {
    name = "backendPool"
  }

  resource "azurerm_application_gateway_backend_address_pool" "example" {
  name                = "backendPool"
  resource_group_name = azurerm_resource_group.pranavirg.name
  application_gateway_name = azurerm_application_gateway.pranaviAGW.name

  backend_addresses = [
    # Reference the VMs in the backend pool
    for vm in azurerm_windows_virtual_machine.pranavivms : {
      fqdns = [azurerm_network_interface.app[vm.count].private_ip_address]
    }
  ]
}

  # Define Web Application Firewall (WAF) settings
  web_application_firewall_configuration {
    enabled               = true
    firewall_mode         = "Prevention"
    rule_set_type         = "OWASP"
    rule_set_version      = "3.0"
    disabled_rule_groups  = []
    request_body_check    = "Enabled"
    request_body_limit    = 131072
    file_upload_limit     = 33554432
  }
}




